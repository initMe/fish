<?xml version="1.0" encoding="UTF-8"?>
<beans	xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans  
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd">
		
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.maxTotal}" />  <!--最大连接数-->
        <property name="maxIdle" value="${redis.maxIdle}" />  <!--最大空闲数-->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}" />  <!--最大等待时间ms-->
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>
	
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}"/>
        <property name="port" value="${redis.port}"/>
        <property name="timeout"  value="100000" />
        <property name="usePool"  value="true" />
        <property name="poolConfig" ref="jedisPoolConfig"/>
		<!--<constructor-arg ref="redisSentinelConfiguration"/> -->
	</bean>	
	
	<!-- Redis Sentinel是Redis官方提供的集群管理工具，使用一个或多个sentinel和Redis的master/slave可以组成一个群集，
	可以检测master实例是否存活，并在master实例发生故障时，将slave提升为master，并在老的master重新加入到sentinel的群集之后，
	会被重新配置，作为新master的slave。这意味着基于Redis sentinel的HA群集是能够自我管理的。 -->
	<!-- <bean id="redisSentinelConfiguration"
          class="org.springframework.data.redis.connection.RedisSentinelConfiguration">
        <property name="master">
            <bean class="org.springframework.data.redis.connection.RedisNode">
                <property name="name" value="redis_6379"></property>
            </bean>
        </property>
        <property name="sentinels">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisNode">
                    <constructor-arg index="0" value="${redis.sentinel.host}" />
                    <constructor-arg index="1" value="${redis.sentinel.port}" />
                </bean>
            </set>
        </property>
    </bean> -->
    
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
    </bean>
</beans>